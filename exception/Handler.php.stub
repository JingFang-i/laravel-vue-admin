<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Log;
use Throwable;
use Tymon\JWTAuth\Exceptions\TokenBlacklistedException;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Throwable  $exception
     * @return void
     *
     * @throws \Exception
     */
    public function report(Throwable $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Throwable  $exception
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @throws \Throwable
     */
    public function render($request, Throwable $exception)
    {
        if (config('app.debug')) {
            return $this->prepareJsonResponse($request, $exception);
        } else {
            $response = response();
            if ($exception instanceof AuthenticationException) {
                return $response->tokenInvalid(); //未认证
            } else if ($exception instanceof TokenExpiredException) {
                return $response->tokenInvalid();
            } else if ($exception instanceof TokenBlacklistedException) {
                return $response->error('禁止登录', 403);
            } else {
                Log::error($exception->getMessage() . PHP_EOL .
                    $exception->getFile() .
                    $exception->getLine() .
                    $exception->getTraceAsString()
                );
                return ! $request->pjax()
                    ? $response->error()
                    : $this->prepareResponse($request, $exception);
            }

        }
    }
}
